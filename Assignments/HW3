count = 0

def inversionsCount(x):
global count
midsection = len(x) // 2
leftArray = x[:midsection]
rightArray = x[midsection:]
if len(x) > 1:
# Divid and conquer with recursive calls to left and right arrays similar to
# recursions
inversionsCount(leftArray)
inversionsCount(rightArray)

# Merge sorted sub-arrays and keep
# count of split inversions
i, j = 0, 0
a = leftArray; b = rightArray
for k in range(len(a) + len(b) + 1):
if a[i] <= b[j]:
x[k] = a[i]
i += 1
if i == len(a) and j != len(b):
while j != len(b):
k +=1
x[k] = b[j]
j += 1
break
elif a[i] > b[j]:
x[k] = b[j]
#update count here
count += len(a)-i
j += 1
if j == len(b) and i != len(a):
while i != len(a):
k+= 1
x[k] = a[i]
i += 1
break
return x

# Driver Code
if __name__ == "__main__":
numList = [1, 20, 6, 4, 15, 10, 7]
# call function and output number of inversions
import time
start_time = time.time()
inversionsCount(numList)
end_time = time.time()
print("execution time: ",end_time-start_time)
print(count)
