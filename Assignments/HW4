import math

# function to calculate Euclidean distance between two points
def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

# brute force function to calculate closest distance when points are small
def bruteForce(points):
    minDistance = float("inf")
    n = len(points)
    for i in range(n):
        for j in range(i + 1, n):
            minDistance = min(minDistance, distance(points[i], points[j]))
    return minDistance

# function that finds closest points in strip within delta distance
def closestInStrip(strip, delta):
    minDistance = delta
    # sort by y coordinate
    strip.sort(key=lambda point: point[1])
    n = len(strip)
    for i in range(n):
        for j in range(i + 1, n):
            # break if y coordinates are too far apart
            if strip[j][1] - strip[i][1] >= minDistance:
                break
            minDistance = min(minDistance, distance(strip[i], strip[j]))
    return minDistance

# main recursive function to find closest pair of points
def closestPairRecursive(pointsSorted):
    n = len(pointsSorted)

    # base case when there are 3 or fewer points
    if n <= 3:
        return bruteForce(pointsSorted)

    # divide; split points in half
    mid = n // 2
    midpoint = pointsSorted[mid]

    # recursively find smallest distance in both left and right halves
    leftHalf = pointsSorted[:mid]
    rightHalf = pointsSorted[mid:]
    deltaLeftHalf = closestPairRecursive(leftHalf)
    deltaRightHalf = closestPairRecursive(rightHalf)

    # find minimum distance in delta distance from midpoint
    delta = min(deltaLeftHalf, deltaRightHalf)

    # create strip of points in delta distance from midpoint
    strip = [point for point in pointsSorted if abs(point[0] - midpoint[0]) < delta]

    # closest pair in strip and compare with delta
    return min(delta, closestInStrip(strip, delta))

# main function that prepares points and calls recursive function
def closestPair(points):
    pointsSorted = sorted(points, key=lambda point: point[0])
    return closestPairRecursive(pointsSorted)

# example
points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
result = closestPair(points)
print(f"The smallest distance is: {result:.6f}")

# Execution Result
# Input: [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
# Output: The smallest distance is: 1.414214
