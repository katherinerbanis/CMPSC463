class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1  # height of node initially set to 1

class AVLTree:
    def insert(self, root, key):
        # step 1: perform standard BST insert
        if not root:
            return Node(key)
        elif key < root.key:
            root.left = self.insert(root.left, key)
        else:
            root.right = self.insert(root.right, key)

        # step 2: update height of root node
        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))

        # step 3: get balance factor
        balance = self.get_balance(root)

        # step 4: balance tree

        # left left case
        if balance > 1 and key < root.left.key:
            return self.right_rotate(root)

        # right right case
        if balance < -1 and key > root.right.key:
            return self.left_rotate(root)

        # left right case
        if balance > 1 and key > root.left.key:
            root.left = self.left_rotate(root.left)
            return self.right_rotate(root)

        # right left case
        if balance < -1 and key < root.right.key:
            root.right = self.right_rotate(root.right)
            return self.left_rotate(root)

        return root

    def left_rotate(self, z):
        y = z.right
        T2 = y.left

        # perform rotation
        y.left = z
        z.right = T2

        # update heights
        z.height = 1 + max(self.get_height(z.left), self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))

        # return new root
        return y

    def right_rotate(self, z):
        y = z.left
        T3 = y.right

        # perform rotation
        y.right = z
        z.left = T3

        # update heights
        z.height = 1 + max(self.get_height(z.left), self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))

        # return new root
        return y

    def get_height(self, node):
        if not node:
            return 0
        return node.height

    def get_balance(self, node):
        if not node:
            return 0
        return self.get_height(node.left) - self.get_height(node.right)

    def pre_order(self, root):
        if not root:
            return
        print(f"{root.key} ", end="")
        self.pre_order(root.left)
        self.pre_order(root.right)

# 3. Testing
avl_tree = AVLTree()
root = None

# insert nodes and observe balancing
nodes = [10, 20, 30, 40, 50, 25, 15, 5, 35, 45]
for key in nodes:
    root = avl_tree.insert(root, key)
    print(f"Inserting {key}: ", end="")
    avl_tree.pre_order(root)
    print()  # newline for better readability after each insertion

# Results
# Test Case: [10, 20, 30, 40, 50, 25, 15, 5, 35, 45]

# Inserting 10: 10 
# Inserting 20: 10 20 
# Inserting 30: 20 10 30 
# Inserting 40: 20 10 30 40 
# Inserting 50: 20 10 40 30 50 
# Inserting 25: 30 20 10 25 40 50 
# Inserting 15: 30 20 10 15 25 40 50 
# Inserting 5: 30 20 10 5 15 25 40 50 
# Inserting 35: 30 20 10 5 15 25 40 35 50 
# Inserting 45: 30 20 10 5 15 25 40 35 50 45 
